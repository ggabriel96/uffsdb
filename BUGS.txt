REPOSITÓRIO: https://github.com/ggabriel96/uffsdb

MEMBROS DA EQUIPE: Acácia dos Campos da Terra, Gabriel Batista Galli, Harold Cristien Santos Becker, João Pedro Winckler Bernardi e Vladimir Belinski.

RELAÇÃO DE ERROS:

-----------------------------------------------------------[IDENTIFICADOS E CONSERTADOS]-------------------------------------------------------------------------

#1) Ao ser alterado o nome do banco de 'ibetres' para 'uffsdb' o alinhamento das colunas ao se executar um comando \l era perdido. Assim, foi arrumado o alinhamento
das colunas no comando \l.

#2) Quando uma tabela possuia somente um atributo, ao ser realizado um select * os dados não apareciam organizados de maneira colunar, mas sim de forma linear. Foi
ajustado para os dados aparecerem sob a mesma coluna, pois essa é a forma correta.

#3) Mesmo um atributo sendo char era possível enviar uma string na inserção de um dado sem que fosse apresentado um erro ou warning. O insert abaixo, por exemplo,
não gerava erro ou warning (e a string inserida era truncada para um char!):

    CREATE TABLE tbl(
	   cod INTEGER PRIMARY KEY,
	   name VARCHAR(10),
	   sex char
    );
    insert into tbl values (4, 'Luiz', 'Masculino');
	
#4) Ao ser criado um banco de nome com 19 caracteres era apresentado um warning informando que o nome iria ser truncado, mas não o era:
	
	create database a123456789b12345678;
    WARNING: database name is too long, it will be truncate
    \c a123456789b12345678;

Além disso, o truncamento não funcionava direito em casos diversos. Logo, foi arrumado o truncamento.

#5) Ao digitar vários ';' numa mesma linha e pressionar Enter, 'uffsdb=#' era printado tantas vezes quanto o número de ';' digitados..

#6) Ao tentar excluir um banco no qual se está atualmente conectado, depois se conectar a outro banco e reexecutar o comando de exclusão, era apresentado que não havia sido possível remover o arquivo do banco a ser deletado ("Arquivo ou diretório não encontrado"), mas o banco era mesmo assim excluído.
Por exemplo:

    uffsdb=# \c a123456789b123456789
    You are now connected to database "a123456789b12345678" as user "uffsdb".
    a123456789b12345678=# drop database a123456789b12345678
    a123456789b12345678-# ;
    ERROR: You can not delete the database that you are connected.
    a123456789b12345678=# \c uffsdb
    You are now connected to database "uffsdb" as user "uffsdb".
    uffsdb=# drop database a123456789b12345678;
    rm: não foi possível remover “data/a123456789b12345678/\241\266Hh\321\177”: Arquivo ou diretório não encontrado
    DROP DATABASE
    uffsdb=#

#7) Ao tentar recriar o banco deletado da forma descrita no problema 6, o banco era criado, mas era apresentado um erro informando que era impossível criar o
diretório, pois o arquivo já existia:

	uffsdb=# create database a123456789b12345678
	uffsdb-# ;
	WARNING: database name is too long, it will be truncated
	mkdir: é impossível criar o diretório “data/a123456789b12345678”: Arquivo existe
	CREATE DATABASE
	uffsdb=#

#8) Ocorria stack smashing ao executar 'create database a123456789b123456789';

#9) Ocorria stack smashing após resetar o banco e executar:

    CREATE DATABASE a123456789b12345678;
    \c a123456789b12345678
    CREATE TABLE tbl(
     	cod INTEGER PRIMARY KEY,
    	name VARCHAR(10),
    	sex char
    );
    insert into tbl values (4, 'Luiz', 'Ab');
    drop database a123456789b12345678;
    drop table tbl;
    drop database a123456789b12345678;
    \c uffsdb
    drop database a123456789b12345678;
    CREATE DATABASE a123456789b12345678;
    \d
    CREATE TABLE tbl(
    	 cod INTEGER PRIMARY KEY,
    	name VARCHAR(10),
    	sex char
    );
    \d
    \c a123456789b12345678
    \d
    CREATE TABLE tbl(
     	cod INTEGER PRIMARY KEY,
    	name VARCHAR(10),
    	sex char
    );
    drop database a123456789b12345678;
    \c uffsdb
    drop database a123456789b12345678;
    CREATE DATABASE a123456789b12345678;
    \d
    \c a123456789b12345678
    \d
    CREATE TABLE tbl(
     	cod INTEGER PRIMARY KEY,
    	name VARCHAR(10),
    	sex char
    );
	
#10) Ao criar um banco chamado uffsdb, não era retornada a mensagem de sucesso que deve aparecer quando ocorre a criação de um novo banco: CREATE DATABASE.

#11) Caso fosse excluído o banco padrão e criados bancos o suficiente para ocupar o limite máximo definido, na próxima vez que o banco era executado um erro era
gerado.

#12) Havia um problema com os atributos de uma tabela, pois os DEFINEs não eram usados corretamente. Ao ser executado:

     create database d;
     \c d
     create table t (c char);
     \t t

Era printado:

    Table "public.t"
    Column             | Type         | Modifiers
   --------------------+--------------+-----------
                       | null
                       | null
                       | null
                       | null
                       ...
					   
A utilização dos DEFINEs foi ajustada.

#13) Nomes longos para tabelas truncavam pegando a primeira letra do tipo. Além disso, as colunas ficavam desformatadas. Por exemplo:

    uffsdb=# create table tbl ( a123456789b123456789c123456789a123456789b123456789c123456789a123456789b123456789c123456789 integer );
    uffsdb=# \t tbl
    	  Table "public.tbl"
     Column             | Type         | Modifiers
    --------------------+--------------+-----------
      a123456789b123456789c123456789a123456789i | null

No exemplo acima o i do nome vem de integer, se criar a mesma tabela com um char, aparece um c;

#14) Ao tentar excluir o nome de uma coluna com o comando drop table era apresentado um erro, como esperado. Contudo, se depois fosse tentado excluir a tabela com
o mesmo comando ocorria uma falha de segmentação:

    // Note que a tabela tem nome tbl, mas mandei excluir o nome da coluna
    uffsdb=# create table tbl ( a123456789b123456789c123456789a123456789b123456789c123456789a123456789b123456789c123456789 integer );
    CREATE TABLE
    uffsdb=# drop table a123456789b123456789c123456789a123456789i;
    ERROR: table "a123456789b123456789c123456789a123456789i" does not exist.
    uffsdb=# drop table a123456789b123456789c123456789a123456789i;
    ERROR: table "a123456789b123456789c123456789a123456789i" does not exist.
    uffsdb=# drop table a123456789b123456789c123456789a123456789i;
    ERROR: table "a123456789b123456789c123456789a123456789i" does not exist.
    uffsdb=# drop table tbl;
    Falha de segmentação (imagem do núcleo gravada)
	
#15) Ao reexecutar o banco (tendo sido executados os comandos do problema 14) ocorria o seguinte erro:

    uffsdb=# \t tbl
    	  Table "public.tbl"
     Column             | Type         | Modifiers
    --------------------+--------------+-----------
      a123456789b123456789c123456789a123456789i | null

    uffsdb=# insert into tbl values (1);
    *** Error in `./uffsdb': free(): invalid size: 0x0000000000f842e0 ***
    Abortado (imagem do núcleo gravada)

#16) O arquivo da tabela só era criado depois que se adicionava alguma tupla, então se fosse tentado criar duas tabelas vazias com o mesmo nome era retornado
o erro indevido, pois deveria ser apresentado que a tabela já existe, não simplesmente que ela não pode ser criada:

    uffsdb=#  create table tbl ( a123456789b123456789c123456789a123456789b123456789c123456789a123456789b123456789c123456789 integer );
    CREATE TABLE
    uffsdb=#  create table tbl ( a123456789b123456789c123456789a123456789b123456789c123456789a123456789b123456789c123456789 integer );
    ERROR 74: table couldn't be created
	
---------------------------------------------------------[IDENTIFICADOS E NÃO CONSERTADOS]---------------------------------------------------------------------------
** "No READ.md deve ter a relação dos bugs não consertados: uma descrição rápida, como acontece, funções envolvidas, entre outros."

#1) São exibidas mensagens de erros repetidas, em duas linhas. Acontece ao digitar uma sintaxe errada. Como por exemplo:

    uffsdb=# create databasea baba;
    ERROR: syntax error.
    uffsdb=# ERROR: syntax error.
    
#2) Não reconhece símbolos que não as letras, como por exemplo  '[' e ']' e printa algumas coisas sem sentido.

    uffsdb=# ;;;;;;;
    uffsdb=# uffsdb=# uffsdb=# uffsdb=# uffsdb=# uffsdb=# uffsdb=#
    uffsdb=# [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
    [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[uffsdb=#

#3) Makefile não funciona como devia. É necessário fazê-lo manualmente na pasta interface e depois na fonte para ver as alterações feitas no lex/yacc.

#4) Erros que não existem são mostrados, como por exemplo ao inserir tuplas em uma tabela que não existe mais: não é necessário dizer que a linha do insert está errada, basta dizer que a tabela não existe.

    uffsdb=# drop table tbl;
    uffsdb=# insert into tbl values (1);
    ERROR: relation "tbl" was not found.
    ERROR: INSERT has more expressions than target columns.

#5) Gera um erro por caracter quando se digita algo errado e continua repetindo o erro caracter por caracter.

    uffsdb=# inser into b values (2, 2);
    default @ parser.interface().while.else
    ERROR: syntax error.
    uffsdb=#
    default @ parser.interface().while.else
    ERROR: syntax error.
    uffsdb=#
    default @ parser.interface().while.else
    ERROR: syntax error.
    uffsdb=#
    default @ parser.interface().while.else
    ERROR: syntax error.
    uffsdb=#
    default @ parser.interface().while.else
    ERROR: syntax error.
    uffsdb=#
    default @ parser.interface().while.else
    ERROR: syntax error.
    uffsdb=#
    default @ parser.interface().while.else
    ERROR: syntax error.
    uffsdb=#
    default @ parser.interface().while.else
    ERROR: syntax error.

#6) Quando cria uma tabela com um campo do tipo varchar maior ou igual a 1000, a tabulação não funciona direito, empurrando os demais campos para a direita. Como no exemplo:

    uffsdb=# create table animal (string1 varchar(1001), string2 varchar(3) );
    CREATE TABLE
    uffsdb=# \t animal
    	  Table "public.animal"
     Column             | Type         | Modifiers
    --------------------+--------------+-----------
      string1           |  varchar(1001) | null
      string2           |  varchar(3) | null

//Esse erro abaixo nem existia antes, surgiu quando mexi na função de criar tabela

#7) Digitar várias aspas simples 





